#include <iostream>
#include <format>

/*
 #####for loopの復習#####
 for (A ; B; C)
 {
	...
 }
 このようなfor loopがあるとき、次のように動作します。
 1. Aに従って変数等の初期化を行う。
 2. Bの条件が満たされているかを判定する。満たされている場合、3に進む。満たされていない場合、5に進む。
 3. ...の部分の処理を実行する。
 4. Cの処理を行う。その後、2に戻る。
 5. for loopを終了し、その後の処理に進む。

 for loopの3の処理の中で使用可能な特殊な機能
 * continue : 3の処理の中でcontinueの一文に到達した場合、その時点で...の処理を中断して2に戻ります。
 * break    : 3の処理の中でbreakの一文に到達した場合、その時点で...の処理を中断して5に進みます。
 
 多くの場合、次のようにint型のカウンタを使ってループさせます。
 for (int i = 0; i < 10; ++i)
 {
    std::cout << i << "\n";
 }
 このとき、i==0からi==9まで順にループし、各数字が画面に表示されます。
 int型変数を使うことが多いとはいえ、別にint型である必要はありません。
 for (double x = 0.00; x < 3.14; x += 0.01) ... 0.00から3.13まで
 for (;;) ... breakしないと無限ループ
*/

int main()
{
	// 例1
	for (int x = 0; x < 3; ++x)
	{
		std::cout << std::format("x is {}\n", x);
	}

	// 例2
	for (int x = 0; x < 5; ++x)
	{
		// x % 2はxを2で割ったときの余りを求めています。
		// 余りが0、すなわちxが偶数の時、ifの条件が満たされるためcontinueに到達し、
		// std::cout << std::format...が実行されることなく次のループに進むことになります。
		if (x % 2 == 0)
			continue;
		std::cout << std::format("x is {}\n", x);
	}

	// 例3
	for (int x = 0; x < 5; ++x)
	{
		// x == 4となったとき、breakが実行され、
		// ループが強制終了されます。
		if (x == 4)
			break;
		std::cout << std::format("x is {}\n", x);
	}
}

/*
 問題
 1) 例1～3でxの範囲を5～10など色々と変更して、どんな振る舞いになるか見てみましょう。
 2) 例2、例3の条件をx > 3やx % 3 != 1など色々変更して実行してみましょう。
*/